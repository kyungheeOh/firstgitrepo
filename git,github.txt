git다운로드,install
https://git-scm.com/downloads
next > next > next ..
설치완료후 release page 닫기
git bash -커멘드 창으로 git명령어 사용
git은 컴퓨터 설치, 여러명이 사용하려면 gitHub가입이 필요.
gitHub - tensorflow, react 등 오픈 소스 제공

git bash - bash sell(linux)환경 구성, linux명령어 사용
ex)
pwd : 현재 작업중인 경로 표시
cd : 경로변경 
ls : 모든 파일 리스트
mkdir : 새로운 디렉토리 생성

vi : 문서 파일 편집기
i insert mode(현재 커서 위치) <> esc normal mode
a append mode(현재 커서 위치 + 한칸) 
o open line mode(현재 커서 아랫줄)
:w 저장 :q 종료 :q! 강제종료 :wq 저장종료 :wq! 강제저장종료
h,j,k,l 커서상하좌우(=방향키)
----------------------------------------------------------------
git 폴더 만들기
mkdir firstgitrepo
cd firstgitrepo
git init (git저장소 >.git 폴더 생김)

gitHub연동
kyungheeOh
okh1011111@gamil.com

git config --global user.name "kyungheeOh"
git config --global user.email "okh1011111@gamil.com"

git config --global --list (user정보 조회)

git add git,github.txt
git commit -m "git,github 강의 정리"
*add + commit까지해야 반영됨.

git status (파일 상태 조회)
git log (반영내역 조회)
//로컬 저장소 저장

gitHub 우측 상단 [+] Create a new repository
로컬 저장소 폴더와 동일하게 이름 생성
> https://github.com/kyungheeOh/firstgitrepo

git remote add origin https://github.com/kyungheeOh/firstgitrepo
"origin"은 별칭임. 하지만 일반적으로 사용하는 명
git remote -v (연동확인)
>확인결과 
origin  https://github.com/kyungheeOh/kh (fetch)
origin  https://github.com/kyungheeOh/kh (push)
아무것도 안뜨면 연동안된 상태

git push origin master (원격저장소 저장)

git clone (원격저장소에 있는 repository 로컬-newfolder 저장)
cd newfolder
git clone https://github.com/kyungheeOh/firstgitrepo.git

git으로 파일을 받아와야 이전 수정내역들도 같이 남길 수 있음. 

cd firstgitrepo
git pull origin master (원격저장소 변경내역 로컬저장소 저장)

COMMIT, PUSH 명렁어 정리
1. 파일 변경, 파일 생성
2. git add test.txt(파일명)
3. git commit -m "커밋메세지작성"
4. git push origin master

git log
commit eef0817dd61de85e0ecc23d6292ef1b219f33bd4 (HEAD -> master, origin/master)
commit 뒤에 번호가 커밋번호

$ git revert 9a048edaa0e21257e274cc144e0ee7485e1ab59f
revert 편집창이 뜸. 
맨윗줄 메세지에 추가해서 
Revert "버그 포함 commit" 추가추가
입력 후 esc > :wq 수정완료
git push origin master

브랜치
각 브랜치는 독립적이다. 

목록 조회 : git branch
* master
기본 브랜치, 자동생성됨

생성 : git branch developer2

변경 : git checkout developer2
Switched to branch 'developer2'

결과 조회 : git branch
* developer2
  master
  
test 파일생성 : developer2_branch.txt
로컬 변경 사항 조회 : git status
  
git add developer2_branch.txt

developer2에 push : git push origin developer2

로컬 삭제 : git branch -D developer2 
브랜치삭제시에는 다른 브랜치로 checkout 후에 삭제 진행해야함. 
원격 삭제 : git push origin :developer2
----------------------------------------------------------------
gitHub 독자적인 기능

readme.md파일
gitHub repository 메인 화면에 뜨는 설명.
설명을 넣고 싶으면 파일을 생성하면 됨. 

.md확장자 = markdown(*markup html태그 <div></div>)
마크업보다 문법이 쉽고 간단 > redeme파일, 온라인게시물 등에 사용
# ## ### 글자 크기 결정
들여쓰기 -(하이픈) 조합으로 리스트 땡땡(블랙포인트) 표시 
**~** 굵은글씨

마크다운 언어 참고 https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet
왼쪽 마크다운 언어 입력시 우측 결과 출력 사이트 https://markdownlivepreview.com/

github web > add file > README.md
입력 후 [commit]
git bash에서 로컬로도 저장.
git pull origin master

README 파일 repository생성 동시에 생성
github web > new > repository생성 > Add a README file체크하면 바로 생성.

README.md 파일 예시 오픈소스 https://github.com/tensorflow/tensorflow


Issue (gitHub tab)
버그 제보 / 작업자 내용 공유
Issue open > commit > Issue close

Issue tab > [New issue] > 마크다운 문법입력(제목,내용) 우측 label선택(bug/question 등 선택 가능) > [submit issue]
파일 수정 후 commit push
Issue tab > Add a comment > [Close with comment]
커밋과 연결 기능은 없는듯..

Wiki (gitHub tab)
불특정 다수가 협업을 통해 직접 내용과 구조를 수정할 수 있는 웹사이트 (=note)
wiki tab > [Create the first page] > 마크다운 문법입력(제목,내용) > [save page]

wiki관리 예시 vuejs github https://github.com/vuejs

Github Gist
하나의 파일에 대한 변경내역을 관리

상단 [+] New gist
gist file 생성 직후 secret gist file, link 공유시만 접근가능
[Edit] > [Make public] 선택시 변경 가능. 
파일 변경마다 Revisions tab에서 변경 사항 확인가능. 
미니 git 저장소. 간단한 코드 공유에 사용하는

Github 커뮤니티 기능
Star = 좋아요
follow = 팔로우(저장소/사람)
watch = 변경사항 알림

Milestone (gitHub Issue tab)
특정일자까지 목표 설정
issue별 milestone생성가능.
Issue tab > [Milestones] > [New milestone] > 제목/마감일/설명입력 > [create milestone]

issue와 연결 
issue생성시 우측 label선택 아래 Milestone선택가능
여러 issue (단계별)생성 후 한개의 milestone으로 연결하면 해당 milestone에서 이슈를 모아서 볼 수 있음.
2개 issue연결 후 1개를 close하면 50프로 진척률로 표기됨.
1개 milestone최종 마감일 설정, 분석/설계/개발/테스트 등 여러 이슈를 생성해서 연결해서 사용.
----------------------------------------------------------------
소프트웨어 버전 관리 : Major.Minor.Patch
ex) v0.0.1 > v0.1.1 > v0.1.2 > v1.1.2 
대규모 기능 추가 및 변경 v2.0.1 > v3.0.1
세부기능, 요구사항에 따른 수정 v2.1.1 > v2.2.1
버그패치, 사소한 변경 v2.1.1 > v2.1.2
오픈소스 tensorflow tags : https://github.com/tensorflow/tensorflow/tags 버전관리(v*.*.*)
현재 소스코드 상태 기록 = git tag (git tag -a v2.4.1)
branch <> tag
local tag리스트 조회 git tag -l
원격저장소 저장 git push origin v0.0.1 

gitHub repository에서 1tags 생성 됨 https://github.com/kyungheeOh/firstgitrepo/tags
tag 리스트에서 원하는 버전 소스를 다운로드할 수 있음(zip  tar.gz)

tag 삭제 : git tag -d v0.0.1
git push origin :v0.0.1

gitFlow전략 = branch생성 전략
Git Flow전략(Vincent Drieseen 제안)
gitlab Flow전략
gitHub Flow전략

Git Flow는 다음과 같이 5개의 branch를 이용해서 개발을 진행합니다.
1. master : 제품으로 출시될 수 있는 브랜치
2. develop : 다음 출시 버전을 개발하는 브랜치(master base)
3. feature : 기능을 개발하는 브랜치(develop base)
4. release : 이번 출시 버전을 준비하는 브랜치(feature + develop, tagging 생성 후 master로 머지할 branch)
5. hotfix : 출시 버전에서 발생한 버그를 수정하는 브랜치(마지막 출시 버전 + 버그 수정)

feature(기능 개발) > 기능을 모아서 version생성 > qa > release
master > develop > feature, feature, feature..... > develop merge > release qa > master > tagging > bug > hotfix(master base)

논리적 저장소
Working directory >[git add]> staging Area >[git commit]> Repository
----------------------------------------------------------------

* 명령어

현재 폴더 경로 조회 : pwd
현재 폴더 조회 : ls , ll
폴더 이동 : cd /Desktop/kh
git 업로드(폴더,파일 다 가능)
$ git add Goal세팅,성과검토_workday/
$ git commit -m "workday작성"
$ git push origin master

 warning case
 메세지 : LF will be replaced by CRLF the next time Git touches it
 git config --global core.autocrlf true

push fail
폴더 하위의 모든 파일 삭제
$ git rm --cached P포인트

새폴더에 clone하기
상위폴더 위치에서 
git clone https://github.com/kyungheeOh/firstgitrepo.git

git clone https://github.com/kyungheeOh/kh.git




























